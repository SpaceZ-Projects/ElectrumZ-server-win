import asyncio
import logging
import sys
import os
import datetime
from pathlib import Path
from cryptography import x509
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives import serialization

from electrumz import Controller, Env
from electrumz.lib.util import CompactFormatter, make_logger




def set_environment_variables(logger):
    """Set required environment variables."""
    appdata_local_path = Path(os.environ.get('LOCALAPPDATA', Path.home() / 'AppData' / 'Local'))
    db_directory_path = appdata_local_path / 'BTCZCommunity' / 'ElectrumZ'
    db_directory_path.mkdir(parents=True, exist_ok=True)
    cert_file = db_directory_path / 'electrumz.crt'
    key_file = db_directory_path / 'electrumz.key'
    csr_file = db_directory_path / 'electrumz.csr'
    
    os.environ['HOME'] = str(db_directory_path)
    os.environ['DB_DIRECTORY'] = str(db_directory_path)
    os.environ['DAEMON_URL'] = 'http://rpcuser:rpcpassword@127.0.0.1:rpcport'
    os.environ['COIN'] = 'BitcoinZ'
    os.environ['EVENT_LOOP_POLICY'] = 'winloop'
    os.environ['SERVICES'] = 'tcp://:50001,ssl://:50002,wss://:50004,rpc://0.0.0.0:8000'
    os.environ['SSL_CERTFILE'] = str(cert_file)
    os.environ['SSL_KEYFILE'] = str(key_file)
    os.environ['CSR_FILE'] = str(csr_file)
    os.environ['CACHE_MB'] = '1200'
    os.environ['DB_ENGINE'] = 'leveldb'
    os.environ['INITIAL_CONCURRENT'] = '1000000'
    os.environ['COST_SOFT_LIMIT'] = '1000000'
    os.environ['COST_HARD_LIMIT'] = '1000001'
    os.environ['REQUEST_SLEEP'] = '0'
    os.environ['DONATION_ADDRESS'] = ''



def generate_ssl_files(logger):
    """Generate SSL private key, CSR, and self-signed certificate if they do not exist."""
    cert_file = os.environ['SSL_CERTFILE']
    key_file = os.environ['SSL_KEYFILE']
    csr_file = os.environ['CSR_FILE']

    if not os.path.exists(cert_file) or not os.path.exists(key_file):
        private_key = rsa.generate_private_key(
            public_exponent=65537,
            key_size=2048,
        )
        
        with open(os.environ['SSL_KEYFILE'], 'wb') as key_file:
            key_file.write(
                private_key.private_bytes(
                    encoding=serialization.Encoding.PEM,
                    format=serialization.PrivateFormat.TraditionalOpenSSL,
                    encryption_algorithm=serialization.NoEncryption()
                )
            )
        logger.info(f'Private key generated at {os.environ["SSL_KEYFILE"]}')
        
        subject = x509.Name([
            x509.NameAttribute(x509.NameOID.ORGANIZATION_NAME, u'ElectrumZ'),
        ])
        
        csr = x509.CertificateSigningRequestBuilder().subject_name(
            subject
        ).sign(private_key, hashes.SHA256())
        
        with open(os.environ['CSR_FILE'], 'wb') as csr_file:
            csr_file.write(csr.public_bytes(encoding=serialization.Encoding.PEM))
        
        logger.info(f'CSR generated at {os.environ["CSR_FILE"]}')
        
        certificate = x509.CertificateBuilder().subject_name(
            subject
        ).issuer_name(
            subject
        ).public_key(
            private_key.public_key()
        ).serial_number(
            x509.random_serial_number()
        ).not_valid_before(
            datetime.datetime.utcnow()
        ).not_valid_after(
            datetime.datetime.utcnow() + datetime.timedelta(days=365)
        ).sign(private_key, hashes.SHA256())
        
        with open(os.environ['SSL_CERTFILE'], 'wb') as cert_file:
            cert_file.write(certificate.public_bytes(encoding=serialization.Encoding.PEM))
        
        logger.info(f'Self-signed certificate generated at {os.environ["SSL_CERTFILE"]}')
        
        # Delete CSR file
        os.remove(os.environ['CSR_FILE'])
        logger.info(f'CSR file deleted: {os.environ["CSR_FILE"]}')



def print_ansi_art(file_path):
    try:
        with open(file_path, 'r') as file:
            ansi_art = file.read()
        print(ansi_art)
    except FileNotFoundError:
        print(f"Error: The file {file_path} was not found.")
    except IOError:
        print(f"Error: Could not read the file {file_path}.")




def main():
    """Set up logging, environment variables, and run the server."""
    ansi_file_path = os.path.join(os.path.dirname(__file__), 'img', 'electrumz.ans')
    print_ansi_art(ansi_file_path)

    log_fmt = Env.default('LOG_FORMAT', '%(asctime)s - %(levelname)s - %(name)s - %(message)s')
    handler = logging.StreamHandler(sys.stdout)
    handler.setFormatter(CompactFormatter(log_fmt))
    logger = make_logger('electrumz', handler=handler, level='INFO')

    logger.info('ElectrumZ server starting')
    try:
        if sys.version_info < (3, 8):
            raise RuntimeError('ElectrumZ requires Python 3.8 or greater')

        set_environment_variables(logger)
        generate_ssl_files(logger)

        env = Env()
        logger.info(f'Logging level: {env.log_level}')
        logger.setLevel(env.log_level)
        controller = Controller(env)
        asyncio.run(controller.run())
    except Exception:
        logger.exception('ElectrumZ server terminated abnormally')
    else:
        logger.info('ElectrumZ server terminated normally')

if __name__ == '__main__':
    main()